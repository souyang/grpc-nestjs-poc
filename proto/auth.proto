syntax = "proto3";

package auth;

service UserService {
    rpc CreateUser (CreateUserRequest) returns (UserResponse) {}
    rpc GetAllUsers (GetAllUsersRequest) returns (UsersResponse) {}
    rpc GetUserById (GetUserByIdRequest) returns (UserResponse) {}
    rpc UpdateUser (UpdateUserRequest) returns (UserResponse) {}
    rpc DeleteUser (GetUserByIdRequest) returns (Status) {}
    rpc StreamUsers (stream PaginationRequest) returns (stream UsersResponse) {}
}

enum SortOrder {
    ASC = 0;
    DESC = 1;
}

message PaginationRequest {
    int32 page = 1;
    int32 limit = 2;
    repeated SortingField sortFields = 3; 
}

message SortingField {
    string field = 1;
    SortOrder order = 2;
}

message GetAllUsersRequest {
    PaginationRequest pagination = 1;
}

message UpdateUserRequest {
    string id = 1;
    UserUpdateFields updateFields = 2;
}

message UserUpdateFields {
    optional int32 age = 1;
    optional bool subscribed = 2;
    optional SocialMedia socialMedia = 3;
    optional string password = 4;
}

message GetUserByIdRequest {
    string id = 1;
}

message CreateUserRequest {
    string username = 1;
    string password = 2;
    int32 age = 3;
}

message Status {
    int32 code = 1;
    string message = 2;
}

message UsersResponse {
    repeated User users = 1;
    PaginationMetadata metadata = 2;
}

message PaginationMetadata {
    int32 totalItems = 1;
    int32 totalPages = 2;
    int32 currentPage = 3;
    int32 itemsPerPage = 4;
}

message UserResponse {
    User user = 1;
}

message User {
    string id = 1;
    string username = 2;
    int32 age = 3;
    bool subscribed = 4;
    optional SocialMedia socialMedia = 5;
}

message SocialMedia {
    string twitterUri = 1;
    string fbUri = 2;
    map<string, string> extraData = 3;
}
